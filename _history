{"entries":[{"timestamp":1742515019972,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"blocksprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":242,"start2":242,"length1":36,"length2":31}]}]},{"timestamp":1742515022795,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[1,"2"],[0,"0\" y=\""],[1,"2"],[0,"0\"><"]],"start1":104,"start2":104,"length1":14,"length2":16},{"diffs":[[0,"x=\"2"],[-1,"0"],[1,"2"],[0,"5\" y=\""],[1,"2"],[0,"0\"><"]],"start1":156,"start2":156,"length1":15,"length2":16}]}]},{"timestamp":1742548443200,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":257,"start2":257,"length1":17,"length2":21}]}]},{"timestamp":1742548517565,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":111}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n * ジョイスティックでサーボモータを制御するための拡張機能\n * \n * micro:bit V2ピン配置の考慮事項:\n * - アナログ入力として使用可能なピン: \n *   - LED干渉なし: P0, P1, P2\n *   - LED干渉あり: P3, P4, P10\n * - デジタル出力（サーボ制御用）:\n *   - LED干渉なし: P8, P9, P12, P16\n * - P5とP11はボタンA/Bと共有されることに注意\n */\n\n//% weight=100 color=#0fbc11 icon=\"\\uf1b0\" block=\"JoystickServo\"\n//% groups=\"['初期設定', 'サーボ制御', 'イベント']\"\nnamespace joystick_servo {\n    // 内部変数\n    let _joystickXPin: AnalogPin = null;\n    let _joystickYPin: AnalogPin = null;\n    let _buttonPin: DigitalPin = null;\n    let _servoXPin: AnalogPin = null;\n    let _servoYPin: AnalogPin = null;\n\n    // サーボ関連の設定\n    let _servoMinAngle = 0;\n    let _servoMaxAngle = 180;\n    let _servoInitAngle = 90;\n    let _servoStep = 15;\n\n    // ジョイスティック閾値\n    let _xMaxThresholdMax = 780;\n    let _xMaxThresholdMin = 760;\n    let _xMinThreshold = 250;\n    let _yMaxThresholdMax = 800;\n    let _yMaxThresholdMin = 760;\n    let _yMinThreshold = 250;\n\n    // 現在の角度\n    let _xAngle = 90;\n    let _yAngle = 90;\n\n    // 前回の角度\n    let _lastXAngle = 90;\n    let _lastYAngle = 90;\n\n    // 更新状態\n    let _updated = false;\n    let _lastActionTime = 0;\n\n    // デバッグ設定\n    let _debugMode = false;\n\n    // イベントハンドラ\n    let _buttonPressedHandler: () => void = null;\n    let _angleChangedHandler: (xAngle: number, yAngle: number) => void = null;\n\n    /**\n     * ジョイスティックとサーボの初期設定\n     * @param joystickXPin ジョイスティックX軸のピン設定 (推奨: P0, P1, P2)\n     * @param joystickYPin ジョイスティックY軸のピン設定 (推奨: P0, P1, P2, P10)\n     * @param buttonPin ジョイスティックボタンのピン設定 (推奨: P8, P9)\n     * @param servoXPin X軸サーボのピン設定 (推奨: P12, P16)\n     * @param servoYPin Y軸サーボのピン設定 (推奨: P12, P16)\n     */\n    //% blockId=joystick_servo_init\n    //% block=\"ジョイスティックサーボを初期化 X軸 %joystickXPin Y軸 %joystickYPin ボタン %buttonPin サーボX %servoXPin サーボY %servoYPin\"\n    //% joystickXPin.defl=AnalogPin.P0\n    //% joystickYPin.defl=AnalogPin.P1\n    //% buttonPin.defl=DigitalPin.P8\n    //% servoXPin.defl=AnalogPin.P12\n    //% servoYPin.defl=AnalogPin.P16\n    //% group=\"初期設定\"\n    //% weight=100\n    export function init(\n        joystickXPin: AnalogPin,\n        joystickYPin: AnalogPin,\n        buttonPin: DigitalPin,\n        servoXPin: AnalogPin,\n        servoYPin: AnalogPin\n    ): void {\n        _joystickXPin = joystickXPin;\n        _joystickYPin = joystickYPin;\n        _buttonPin = buttonPin;\n        _servoXPin = servoXPin;\n        _servoYPin = servoYPin;\n\n        // ボタンピンをプルアップに設定\n        pins.setPull(buttonPin, PinPullMode.PullUp);\n\n        // サーボを初期位置に設定\n        _xAngle = _servoInitAngle;\n        _yAngle = _servoInitAngle;\n        _lastXAngle = _servoInitAngle;\n        _lastYAngle = _servoInitAngle;\n\n        // サーボを初期位置に動かす\n        pins.servoWritePin(_servoXPin, _xAngle);\n        basic.pause(100);\n        pins.servoWritePin(_servoYPin, _yAngle);\n\n        if (_debugMode) {\n            serial.redirectToUSB();\n            serial.writeLine(\"=== JoystickServo初期化完了 ===\");\n            serial.writeLine(`ジョイスティックX: P${joystickXPin}`);\n            serial.writeLine(`ジョイスティックY: P${joystickYPin}`);\n            serial.writeLine(`ジョイスティックボタン: P${buttonPin}`);\n            serial.writeLine(`サーボX: P${servoXPin}`);\n            serial.writeLine(`サーボY: P${servoYPin}`);\n            serial.writeLine(`サーボ初期角度: X=${_xAngle}度, Y=${_yAngle}度`);\n        }\n\n        // メインループの開始\n        startMainLoop();\n    }\n\n    /**\n     * サーボの角度範囲を設定する\n     * @param minAngle 最小角度 (0-180)\n     * @param maxAngle 最大角度 (0-180)\n     * @param initAngle 初期角度 (0-180)\n     * @param step 角度変化量\n     */\n    //% blockId=joystick_servo_set_limits\n    //% block=\"サーボ角度範囲を設定 最小 %minAngle 最大 %maxAngle 初期値 %initAngle 変化量 %step\"\n    //% minAngle.min=0 minAngle.max=180 minAngle.defl=0\n    //% maxAngle.min=0 maxAngle.max=180 maxAngle.defl=180\n    //% initAngle.min=0 initAngle.max=180 initAngle.defl=90\n    //% step.min=1 step.max=90 step.defl=15\n    //% group=\"初期設定\"\n    //% weight=90\n    export function setServoLimits(\n        minAngle: number,\n        maxAngle: number,\n        initAngle: number,\n        step: number\n    ): void {\n        _servoMinAngle = minAngle;\n        _servoMaxAngle = maxAngle;\n        _servoInitAngle = initAngle;\n        _servoStep = step;\n\n        // 初期角度を更新\n        _xAngle = initAngle;\n        _yAngle = initAngle;\n\n        if (_debugMode) {\n            serial.writeLine(`サーボ角度範囲更新: 最小=${minAngle}, 最大=${maxAngle}, 初期=${initAngle}, 変化量=${step}`);\n        }\n    }\n\n    /**\n     * ジョイスティックの閾値を設定する\n     * @param xMaxThresholdMin X軸最大値の下限閾値\n     * @param xMaxThresholdMax X軸最大値の上限閾値\n     * @param xMinThreshold X軸最小値の閾値\n     * @param yMaxThresholdMin Y軸最大値の下限閾値\n     * @param yMaxThresholdMax Y軸最大値の上限閾値\n     * @param yMinThreshold Y軸最小値の閾値\n     */\n    //% blockId=joystick_servo_set_thresholds\n    //% block=\"ジョイスティック閾値を設定 X最大(下限-上限)%xMaxThresholdMin〜%xMaxThresholdMax X最小%xMinThreshold Y最大(下限-上限)%yMaxThresholdMin〜%yMaxThresholdMax Y最小%yMinThreshold\"\n    //% inlineInputMode=inline\n    //% group=\"初期設定\"\n    //% weight=80\n    export function setJoystickThresholds(\n        xMaxThresholdMin: number,\n        xMaxThresholdMax: number,\n        xMinThreshold: number,\n        yMaxThresholdMin: number,\n        yMaxThresholdMax: number,\n        yMinThreshold: number\n    ): void {\n        _xMaxThresholdMin = xMaxThresholdMin;\n        _xMaxThresholdMax = xMaxThresholdMax;\n        _xMinThreshold = xMinThreshold;\n        _yMaxThresholdMin = yMaxThresholdMin;\n        _yMaxThresholdMax = yMaxThresholdMax;\n        _yMinThreshold = yMinThreshold;\n\n        if (_debugMode) {\n            serial.writeLine(\"ジョイスティック閾値を更新しました\");\n        }\n    }\n\n    /**\n     * デバッグモードの設定\n     * @param enabled デバッグモードを有効にするかどうか\n     */\n    //% blockId=joystick_servo_set_debug\n    //% block=\"デバッグモードを %enabled にする\"\n    //% enabled.shadow=\"toggleOnOff\"\n    //% group=\"初期設定\"\n    //% weight=70\n    export function setDebugMode(enabled: boolean): void {\n        _debugMode = enabled;\n\n        if (_debugMode) {\n            serial.redirectToUSB();\n            serial.writeLine(\"デバッグモードを有効にしました\");\n        } else {\n            serial.writeLine(\"デバッグモードを無効にしました\");\n        }\n    }\n\n    /**\n     * ボタンが押されたときに実行する関数を設定\n     * @param handler ボタンが押されたときに実行する関数\n     */\n    //% blockId=joystick_servo_on_button_pressed\n    //% block=\"ボタンが押されたとき\"\n    //% draggableParameters=reporter\n    //% group=\"イベント\"\n    //% weight=60\n    export function onButtonPressed(handler: () => void): void {\n        _buttonPressedHandler = handler;\n    }\n\n    /**\n     * サーボの角度が変化したときに実行する関数を設定\n     * @param handler 角度が変化したときに実行する関数\n     */\n    //% blockId=joystick_servo_on_angle_changed\n    //% block=\"角度が変化したとき\"\n    //% draggableParameters=reporter\n    //% group=\"イベント\"\n    //% weight=50\n    export function onAngleChanged(handler: (xAngle: number, yAngle: number) => void): void {\n        _angleChangedHandler = handler;\n    }\n\n    /**\n     * サーボの角度を手動で設定する\n     * @param xAngle X軸サーボの角度\n     * @param yAngle Y軸サーボの角度\n     */\n    //% blockId=joystick_servo_set_angles\n    //% block=\"サーボ角度を設定 X %xAngle Y %yAngle\"\n    //% xAngle.min=0 xAngle.max=180 xAngle.defl=90\n    //% yAngle.min=0 yAngle.max=180 yAngle.defl=90\n    //% group=\"サーボ制御\"\n    //% weight=40\n    export function setServoAngles(xAngle: number, yAngle: number): void {\n        // 範囲内に収める\n        _xAngle = Math.constrain(xAngle, _servoMinAngle, _servoMaxAngle);\n        _yAngle = Math.constrain(yAngle, _servoMinAngle, _servoMaxAngle);\n\n        // サーボを動かす\n        moveServos();\n    }\n\n    /**\n     * サーボを初期位置に戻す\n     */\n    //% blockId=joystick_servo_reset\n    //% block=\"サーボを初期位置に戻す\"\n    //% group=\"サーボ制御\"\n    //% weight=30\n    export function resetServos(): void {\n        _xAngle = _servoInitAngle;\n        _yAngle = _servoInitAngle;\n        moveServos();\n    }\n\n    /**\n     * X軸サーボの現在の角度を取得\n     */\n    //% blockId=joystick_servo_get_x_angle\n    //% block=\"X軸サーボの角度\"\n    //% group=\"サーボ制御\"\n    //% weight=20\n    export function getXAngle(): number {\n        return _xAngle;\n    }\n\n    /**\n     * Y軸サーボの現在の角度を取得\n     */\n    //% blockId=joystick_servo_get_y_angle\n    //% block=\"Y軸サーボの角度\"\n    //% group=\"サーボ制御\"\n    //% weight=10\n    export function getYAngle(): number {\n        return _yAngle;\n    }\n\n    // 両方のサーボを現在の角度に移動させる (内部関数)\n    function moveServos(): void {\n        // X軸サーボの更新\n        if (_xAngle != _lastXAngle) {\n            pins.servoWritePin(_servoXPin, _xAngle);\n            _lastXAngle = _xAngle;\n\n            if (_debugMode) {\n                serial.writeLine(\"X軸サーボ: \" + _xAngle + \"度に設定しました\");\n            }\n        }\n\n        // Y軸サーボの更新\n        if (_yAngle != _lastYAngle) {\n            pins.servoWritePin(_servoYPin, _yAngle);\n            _lastYAngle = _yAngle;\n\n            if (_debugMode) {\n                serial.writeLine(\"Y軸サーボ: \" + _yAngle + \"度に設定しました\");\n            }\n        }\n\n        // イベントハンドラの呼び出し\n        if (_angleChangedHandler && (_xAngle != _lastXAngle || _yAngle != _lastYAngle)) {\n            _angleChangedHandler(_xAngle, _yAngle);\n        }\n    }\n\n    // メインループの開始 (内部関数)\n    function startMainLoop(): void {\n        // メインループ\n        basic.forever(function () {\n            // 現在の時間を取得\n            const currentTime = input.runningTime();\n\n            // ジョイスティックの値を読み取る\n            const xValue = pins.analogReadPin(_joystickXPin);\n            const yValue = pins.analogReadPin(_joystickYPin);\n\n            // ボタンの読み取り\n            const buttonState = pins.digitalReadPin(_buttonPin);\n\n            if (_debugMode) {\n                serial.writeValue(\"x\", xValue);\n                serial.writeValue(\"y\", yValue);\n                serial.writeValue(\"btn\", buttonState === 0 ? 1 : 0);\n            }\n\n            // 一定時間間隔でのみアクションを実行\n            if (currentTime - _lastActionTime > 100) {\n                _updated = false;\n\n                // X軸の制御\n                if (xValue > _xMaxThresholdMin && xValue <= _xMaxThresholdMax) {\n                    // X軸が最大値範囲内なら角度を増やす\n                    _xAngle = Math.min(_xAngle + _servoStep, _servoMaxAngle);\n                    _updated = true;\n                } else if (xValue < _xMinThreshold) {\n                    // X軸が最小値より小さければ角度を減らす\n                    _xAngle = Math.max(_xAngle - _servoStep, _servoMinAngle);\n                    _updated = true;\n                }\n\n                // Y軸の制御\n                if (yValue > _yMaxThresholdMin && yValue <= _yMaxThresholdMax) {\n                    // Y軸が最大値範囲内なら角度を増やす\n                    _yAngle = Math.min(_yAngle + _servoStep, _servoMaxAngle);\n                    _updated = true;\n                } else if (yValue < _yMinThreshold) {\n                    // Y軸が最小値より小さければ角度を減らす\n                    _yAngle = Math.max(_yAngle - _servoStep, _servoMinAngle);\n                    _updated = true;\n                }\n\n                // ボタンが押されたとき\n                if (buttonState === 0) {\n                    // ボタンは通常プルアップされており、押すと0になる\n                    if (_buttonPressedHandler) {\n                        _buttonPressedHandler();\n                    } else {\n                        // デフォルトの動作（両方のサーボを中央に戻す）\n                        _xAngle = _servoInitAngle;\n                        _yAngle = _servoInitAngle;\n                    }\n                    _updated = true;\n\n                    if (_debugMode) {\n                        serial.writeLine(\"## ボタンが押されました ##\");\n                    }\n                }\n\n                // いずれかの値が更新されたら\n                if (_updated) {\n                    _lastActionTime = currentTime;\n                    moveServos();\n                }\n            }\n\n            // 短い待機時間\n            basic.pause(50);\n        });\n    }\n}"],[1,"basic.forever(function () {\n\t\n})\n"]],"start1":0,"start2":0,"length1":11514,"length2":33}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ck-servo"],[-1,"-"],[0,"\",\n    \""]],"start1":25,"start2":25,"length1":17,"length2":16},{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":237,"start2":237,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// テストはここに来ます。このパッケージが拡張機能として使用されるときにはコンパイルされません。\n"}]}],"snapshots":[{"timestamp":1742515019971,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-joystick-servo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1742548443200,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"pxt-joystick-servo\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[],"lastSaveTime":1742548637479}