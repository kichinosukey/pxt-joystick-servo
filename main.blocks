<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="$Ca64E(q0i=!`]hwmgZ[" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="A(9EQ6tL]@.@AeuJ|fOd"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace joystick_servo {" line1="    // 内部変数" line2="    let _joystickXPin: AnalogPin = null;" line3="    let _joystickYPin: AnalogPin = null;" line4="    let _buttonPin: DigitalPin = null;" line5="    let _servoXPin: AnalogPin = null;" line6="    let _servoYPin: AnalogPin = null;" line7="" line8="    // サーボ関連の設定" line9="    let _servoMinAngle = 0;" line10="    let _servoMaxAngle = 180;" line11="    let _servoInitAngle = 90;" line12="    let _servoStep = 15;" line13="" line14="    // ジョイスティック閾値" line15="    let _xMaxThresholdMax = 780;" line16="    let _xMaxThresholdMin = 760;" line17="    let _xMinThreshold = 250;" line18="    let _yMaxThresholdMax = 800;" line19="    let _yMaxThresholdMin = 760;" line20="    let _yMinThreshold = 250;" line21="" line22="    // 現在の角度" line23="    let _xAngle = 90;" line24="    let _yAngle = 90;" line25="" line26="    // 前回の角度" line27="    let _lastXAngle = 90;" line28="    let _lastYAngle = 90;" line29="" line30="    // 更新状態" line31="    let _updated = false;" line32="    let _lastActionTime = 0;" line33="" line34="    // デバッグ設定" line35="    let _debugMode = false;" line36="" line37="    // イベントハンドラ" line38="    let _buttonPressedHandler: () =&gt; void = null;" line39="    let _angleChangedHandler: (xAngle: number, yAngle: number) =&gt; void = null;" line40="" line41="    /**" line42="     * ジョイスティックとサーボの初期設定" line43="     * @param joystickXPin ジョイスティックX軸のピン設定 (推奨: P0, P1, P2)" line44="     * @param joystickYPin ジョイスティックY軸のピン設定 (推奨: P0, P1, P2, P10)" line45="     * @param buttonPin ジョイスティックボタンのピン設定 (推奨: P8, P9)" line46="     * @param servoXPin X軸サーボのピン設定 (推奨: P12, P16)" line47="     * @param servoYPin Y軸サーボのピン設定 (推奨: P12, P16)" line48="     */" line49="    //% blockId=joystick_servo_init" line50="    //% block=&quot;ジョイスティックサーボを初期化 X軸 %joystickXPin Y軸 %joystickYPin ボタン %buttonPin サーボX %servoXPin サーボY %servoYPin&quot;" line51="    //% joystickXPin.defl=AnalogPin.P0" line52="    //% joystickYPin.defl=AnalogPin.P1" line53="    //% buttonPin.defl=DigitalPin.P8" line54="    //% servoXPin.defl=AnalogPin.P12" line55="    //% servoYPin.defl=AnalogPin.P16" line56="    //% group=&quot;初期設定&quot;" line57="    //% weight=100" line58="    export function init(" line59="        joystickXPin: AnalogPin," line60="        joystickYPin: AnalogPin," line61="        buttonPin: DigitalPin," line62="        servoXPin: AnalogPin," line63="        servoYPin: AnalogPin" line64="    ): void {" line65="        _joystickXPin = joystickXPin;" line66="        _joystickYPin = joystickYPin;" line67="        _buttonPin = buttonPin;" line68="        _servoXPin = servoXPin;" line69="        _servoYPin = servoYPin;" line70="" line71="        // ボタンピンをプルアップに設定" line72="        pins.setPull(buttonPin, PinPullMode.PullUp);" line73="" line74="        // サーボを初期位置に設定" line75="        _xAngle = _servoInitAngle;" line76="        _yAngle = _servoInitAngle;" line77="        _lastXAngle = _servoInitAngle;" line78="        _lastYAngle = _servoInitAngle;" line79="" line80="        // サーボを初期位置に動かす" line81="        pins.servoWritePin(_servoXPin, _xAngle);" line82="        basic.pause(100);" line83="        pins.servoWritePin(_servoYPin, _yAngle);" line84="" line85="        if (_debugMode) {" line86="            serial.redirectToUSB();" line87="            serial.writeLine(&quot;=== JoystickServo初期化完了 ===&quot;);" line88="            serial.writeLine(`ジョイスティックX: P${joystickXPin}`);" line89="            serial.writeLine(`ジョイスティックY: P${joystickYPin}`);" line90="            serial.writeLine(`ジョイスティックボタン: P${buttonPin}`);" line91="            serial.writeLine(`サーボX: P${servoXPin}`);" line92="            serial.writeLine(`サーボY: P${servoYPin}`);" line93="            serial.writeLine(`サーボ初期角度: X=${_xAngle}度, Y=${_yAngle}度`);" line94="        }" line95="" line96="        // メインループの開始" line97="        startMainLoop();" line98="    }" line99="" line100="    /**" line101="     * サーボの角度範囲を設定する" line102="     * @param minAngle 最小角度 (0-180)" line103="     * @param maxAngle 最大角度 (0-180)" line104="     * @param initAngle 初期角度 (0-180)" line105="     * @param step 角度変化量" line106="     */" line107="    //% blockId=joystick_servo_set_limits" line108="    //% block=&quot;サーボ角度範囲を設定 最小 %minAngle 最大 %maxAngle 初期値 %initAngle 変化量 %step&quot;" line109="    //% minAngle.min=0 minAngle.max=180 minAngle.defl=0" line110="    //% maxAngle.min=0 maxAngle.max=180 maxAngle.defl=180" line111="    //% initAngle.min=0 initAngle.max=180 initAngle.defl=90" line112="    //% step.min=1 step.max=90 step.defl=15" line113="    //% group=&quot;初期設定&quot;" line114="    //% weight=90" line115="    export function setServoLimits(" line116="        minAngle: number," line117="        maxAngle: number," line118="        initAngle: number," line119="        step: number" line120="    ): void {" line121="        _servoMinAngle = minAngle;" line122="        _servoMaxAngle = maxAngle;" line123="        _servoInitAngle = initAngle;" line124="        _servoStep = step;" line125="" line126="        // 初期角度を更新" line127="        _xAngle = initAngle;" line128="        _yAngle = initAngle;" line129="" line130="        if (_debugMode) {" line131="            serial.writeLine(`サーボ角度範囲更新: 最小=${minAngle}, 最大=${maxAngle}, 初期=${initAngle}, 変化量=${step}`);" line132="        }" line133="    }" line134="" line135="    /**" line136="     * ジョイスティックの閾値を設定する" line137="     * @param xMaxThresholdMin X軸最大値の下限閾値" line138="     * @param xMaxThresholdMax X軸最大値の上限閾値" line139="     * @param xMinThreshold X軸最小値の閾値" line140="     * @param yMaxThresholdMin Y軸最大値の下限閾値" line141="     * @param yMaxThresholdMax Y軸最大値の上限閾値" line142="     * @param yMinThreshold Y軸最小値の閾値" line143="     */" line144="    //% blockId=joystick_servo_set_thresholds" line145="    //% block=&quot;ジョイスティック閾値を設定 X最大(下限-上限)%xMaxThresholdMin〜%xMaxThresholdMax X最小%xMinThreshold Y最大(下限-上限)%yMaxThresholdMin〜%yMaxThresholdMax Y最小%yMinThreshold&quot;" line146="    //% inlineInputMode=inline" line147="    //% group=&quot;初期設定&quot;" line148="    //% weight=80" line149="    export function setJoystickThresholds(" line150="        xMaxThresholdMin: number," line151="        xMaxThresholdMax: number," line152="        xMinThreshold: number," line153="        yMaxThresholdMin: number," line154="        yMaxThresholdMax: number," line155="        yMinThreshold: number" line156="    ): void {" line157="        _xMaxThresholdMin = xMaxThresholdMin;" line158="        _xMaxThresholdMax = xMaxThresholdMax;" line159="        _xMinThreshold = xMinThreshold;" line160="        _yMaxThresholdMin = yMaxThresholdMin;" line161="        _yMaxThresholdMax = yMaxThresholdMax;" line162="        _yMinThreshold = yMinThreshold;" line163="" line164="        if (_debugMode) {" line165="            serial.writeLine(&quot;ジョイスティック閾値を更新しました&quot;);" line166="        }" line167="    }" line168="" line169="    /**" line170="     * デバッグモードの設定" line171="     * @param enabled デバッグモードを有効にするかどうか" line172="     */" line173="    //% blockId=joystick_servo_set_debug" line174="    //% block=&quot;デバッグモードを %enabled にする&quot;" line175="    //% enabled.shadow=&quot;toggleOnOff&quot;" line176="    //% group=&quot;初期設定&quot;" line177="    //% weight=70" line178="    export function setDebugMode(enabled: boolean): void {" line179="        _debugMode = enabled;" line180="" line181="        if (_debugMode) {" line182="            serial.redirectToUSB();" line183="            serial.writeLine(&quot;デバッグモードを有効にしました&quot;);" line184="        } else {" line185="            serial.writeLine(&quot;デバッグモードを無効にしました&quot;);" line186="        }" line187="    }" line188="" line189="    /**" line190="     * ボタンが押されたときに実行する関数を設定" line191="     * @param handler ボタンが押されたときに実行する関数" line192="     */" line193="    //% blockId=joystick_servo_on_button_pressed" line194="    //% block=&quot;ボタンが押されたとき&quot;" line195="    //% draggableParameters=reporter" line196="    //% group=&quot;イベント&quot;" line197="    //% weight=60" line198="    export function onButtonPressed(handler: () =&gt; void): void {" line199="        _buttonPressedHandler = handler;" line200="    }" line201="" line202="    /**" line203="     * サーボの角度が変化したときに実行する関数を設定" line204="     * @param handler 角度が変化したときに実行する関数" line205="     */" line206="    //% blockId=joystick_servo_on_angle_changed" line207="    //% block=&quot;角度が変化したとき&quot;" line208="    //% draggableParameters=reporter" line209="    //% group=&quot;イベント&quot;" line210="    //% weight=50" line211="    export function onAngleChanged(handler: (xAngle: number, yAngle: number) =&gt; void): void {" line212="        _angleChangedHandler = handler;" line213="    }" line214="" line215="    /**" line216="     * サーボの角度を手動で設定する" line217="     * @param xAngle X軸サーボの角度" line218="     * @param yAngle Y軸サーボの角度" line219="     */" line220="    //% blockId=joystick_servo_set_angles" line221="    //% block=&quot;サーボ角度を設定 X %xAngle Y %yAngle&quot;" line222="    //% xAngle.min=0 xAngle.max=180 xAngle.defl=90" line223="    //% yAngle.min=0 yAngle.max=180 yAngle.defl=90" line224="    //% group=&quot;サーボ制御&quot;" line225="    //% weight=40" line226="    export function setServoAngles(xAngle: number, yAngle: number): void {" line227="        // 範囲内に収める" line228="        _xAngle = Math.constrain(xAngle, _servoMinAngle, _servoMaxAngle);" line229="        _yAngle = Math.constrain(yAngle, _servoMinAngle, _servoMaxAngle);" line230="" line231="        // サーボを動かす" line232="        moveServos();" line233="    }" line234="" line235="    /**" line236="     * サーボを初期位置に戻す" line237="     */" line238="    //% blockId=joystick_servo_reset" line239="    //% block=&quot;サーボを初期位置に戻す&quot;" line240="    //% group=&quot;サーボ制御&quot;" line241="    //% weight=30" line242="    export function resetServos(): void {" line243="        _xAngle = _servoInitAngle;" line244="        _yAngle = _servoInitAngle;" line245="        moveServos();" line246="    }" line247="" line248="    /**" line249="     * X軸サーボの現在の角度を取得" line250="     */" line251="    //% blockId=joystick_servo_get_x_angle" line252="    //% block=&quot;X軸サーボの角度&quot;" line253="    //% group=&quot;サーボ制御&quot;" line254="    //% weight=20" line255="    export function getXAngle(): number {" line256="        return _xAngle;" line257="    }" line258="" line259="    /**" line260="     * Y軸サーボの現在の角度を取得" line261="     */" line262="    //% blockId=joystick_servo_get_y_angle" line263="    //% block=&quot;Y軸サーボの角度&quot;" line264="    //% group=&quot;サーボ制御&quot;" line265="    //% weight=10" line266="    export function getYAngle(): number {" line267="        return _yAngle;" line268="    }" line269="" line270="    // 両方のサーボを現在の角度に移動させる (内部関数)" line271="    function moveServos(): void {" line272="        // X軸サーボの更新" line273="        if (_xAngle != _lastXAngle) {" line274="            pins.servoWritePin(_servoXPin, _xAngle);" line275="            _lastXAngle = _xAngle;" line276="" line277="            if (_debugMode) {" line278="                serial.writeLine(&quot;X軸サーボ: &quot; + _xAngle + &quot;度に設定しました&quot;);" line279="            }" line280="        }" line281="" line282="        // Y軸サーボの更新" line283="        if (_yAngle != _lastYAngle) {" line284="            pins.servoWritePin(_servoYPin, _yAngle);" line285="            _lastYAngle = _yAngle;" line286="" line287="            if (_debugMode) {" line288="                serial.writeLine(&quot;Y軸サーボ: &quot; + _yAngle + &quot;度に設定しました&quot;);" line289="            }" line290="        }" line291="" line292="        // イベントハンドラの呼び出し" line293="        if (_angleChangedHandler &amp;&amp; (_xAngle != _lastXAngle || _yAngle != _lastYAngle)) {" line294="            _angleChangedHandler(_xAngle, _yAngle);" line295="        }" line296="    }" line297="" line298="    // メインループの開始 (内部関数)" line299="    function startMainLoop(): void {" line300="        // メインループ" line301="        basic.forever(function () {" line302="            // 現在の時間を取得" line303="            const currentTime = input.runningTime();" line304="" line305="            // ジョイスティックの値を読み取る" line306="            const xValue = pins.analogReadPin(_joystickXPin);" line307="            const yValue = pins.analogReadPin(_joystickYPin);" line308="" line309="            // ボタンの読み取り" line310="            const buttonState = pins.digitalReadPin(_buttonPin);" line311="" line312="            if (_debugMode) {" line313="                serial.writeValue(&quot;x&quot;, xValue);" line314="                serial.writeValue(&quot;y&quot;, yValue);" line315="                serial.writeValue(&quot;btn&quot;, buttonState === 0 ? 1 : 0);" line316="            }" line317="" line318="            // 一定時間間隔でのみアクションを実行" line319="            if (currentTime - _lastActionTime &gt; 100) {" line320="                _updated = false;" line321="" line322="                // X軸の制御" line323="                if (xValue &gt; _xMaxThresholdMin &amp;&amp; xValue &lt;= _xMaxThresholdMax) {" line324="                    // X軸が最大値範囲内なら角度を増やす" line325="                    _xAngle = Math.min(_xAngle + _servoStep, _servoMaxAngle);" line326="                    _updated = true;" line327="                } else if (xValue &lt; _xMinThreshold) {" line328="                    // X軸が最小値より小さければ角度を減らす" line329="                    _xAngle = Math.max(_xAngle - _servoStep, _servoMinAngle);" line330="                    _updated = true;" line331="                }" line332="" line333="                // Y軸の制御" line334="                if (yValue &gt; _yMaxThresholdMin &amp;&amp; yValue &lt;= _yMaxThresholdMax) {" line335="                    // Y軸が最大値範囲内なら角度を増やす" line336="                    _yAngle = Math.min(_yAngle + _servoStep, _servoMaxAngle);" line337="                    _updated = true;" line338="                } else if (yValue &lt; _yMinThreshold) {" line339="                    // Y軸が最小値より小さければ角度を減らす" line340="                    _yAngle = Math.max(_yAngle - _servoStep, _servoMinAngle);" line341="                    _updated = true;" line342="                }" line343="" line344="                // ボタンが押されたとき" line345="                if (buttonState === 0) {" line346="                    // ボタンは通常プルアップされており、押すと0になる" line347="                    if (_buttonPressedHandler) {" line348="                        _buttonPressedHandler();" line349="                    } else {" line350="                        // デフォルトの動作（両方のサーボを中央に戻す）" line351="                        _xAngle = _servoInitAngle;" line352="                        _yAngle = _servoInitAngle;" line353="                    }" line354="                    _updated = true;" line355="" line356="                    if (_debugMode) {" line357="                        serial.writeLine(&quot;## ボタンが押されました ##&quot;);" line358="                    }" line359="                }" line360="" line361="                // いずれかの値が更新されたら" line362="                if (_updated) {" line363="                    _lastActionTime = currentTime;" line364="                    moveServos();" line365="                }" line366="            }" line367="" line368="            // 短い待機時間" line369="            basic.pause(50);" line370="        });" line371="    }" line372="}" numlines="373"></mutation></block></statement></block></xml>